#ifndef PILATUSREADER_H
#define PILATUSREADER_H


///////////////////////////////////////////////////////////
// YAT::TASK 
///////////////////////////////////////////////////////////
#include <yat/threading/Task.h>

#define kLO_WATER_MARK      128
#define kHI_WATER_MARK      512

#define kPOST_MSG_TMO       2

#define kTASK_PERIODIC_TIMEOUT_MS    1000
const size_t  PILATUS_START_MSG        =    (yat::FIRST_USER_MSG + 300);
const size_t  PILATUS_STOP_MSG        =    (yat::FIRST_USER_MSG + 301);
const size_t  PILATUS_RESET_MSG        =    (yat::FIRST_USER_MSG + 302);

///////////////////////////////////////////////////////////


#include <stdlib.h>
#include <limits>

#include "Debug.h"
#include "Data.h"
#include <base.h>
#include <file.h>

#include "HwMaxImageSizeCallback.h"
#include "PilatusCommunication.h"
#include "HwBufferCtrlObj.h"


using namespace lima;
using namespace lima::PilatusCpp;
using namespace std;



namespace lima
{
namespace PilatusCpp
{

/*******************************************************************
 * \class Reader
 * \brief object involved reading CBF files generated by Pilatus
 *******************************************************************/

class Reader : public yat::Task
{
    DEB_CLASS_NAMESPC(DebModCamera, "Reader", "Pilatus");

 public:

    Reader(Communication& com, HwBufferCtrlObj& buffer_ctrl);
    ~Reader();

    void start();
    void stop();
    void reset();

  //- [yat::Task implementation]
  protected: 
    virtual void handle_message( yat::Message& msg )      throw (yat::Exception);

 private:

    //- Mutex
    yat::Mutex             lock_;
    Communication&        m_com;
    HwBufferCtrlObj&     m_buffer;    
    int                 m_image_number;
    bool                 m_stop_already_done;
    //@@TODO FOR TEST
    gdshare::File         my_file_image;
    gdshare::String     raw_data;
    std::vector<gdshare::String> vData;
    std::vector<gdshare::String> vLineData;
    uint32_t*             pImage;

};
} // namespace Pilatus
} // namespace lima


#endif // PILATUSREADER_H
